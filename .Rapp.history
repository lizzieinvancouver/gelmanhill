library ("arm")
# Edits 2015-02-19 Dan Flynn#
#
## Fake-data simulation#
library ("arm")#
a <- 1.4#
b <- 2.3#
sigma <- 0.9#
x <- 1:5#
n <- length(x)#
# Simulate data, fit the model, and check the coverage of the conf intervals#
y <- a + b*x + rnorm (n, 0, sigma) # Simulate data, adding error#
lm.1 <- lm (y ~ x) #
display (lm.1) # how close to original parameters?#
#
data.frame(sim = coef(lm.1), true = c(a, b))#
b.hat <- coef (lm.1)[2]       # "b" is the 2nd coef in the model#
b.se <- se.coef (lm.1)[2]     # "b" is the 2nd coef in the model#
cover.68 <- abs (b - b.hat) < b.se     # this will be TRUE or FALSE#
cover.95 <- abs (b - b.hat) < 2*b.se   # this will be TRUE or FALSE#
cat (paste ("68% coverage: ", cover.68, "\n"))#
cat (paste ("95% coverage: ", cover.95, "\n"))#
# Put it in a loop#
n.fake <- 1000#
cover.68 <- rep (NA, n.fake)#
cover.95 <- rep (NA, n.fake)#
for (s in 1:n.fake){#
  y <- a + b*x + rnorm (n, 0, sigma)#
  lm.1 <- lm (y ~ x)#
  b.hat <- coef (lm.1)[2]      #
  b.se <- se.coef (lm.1)[2]   #
  cover.68[s] <- abs (b - b.hat) < b.se  #
  cover.95[s] <- abs (b - b.hat) < 2*b.se #
}#
cat (paste ("68% coverage: ", mean(cover.68), "\n"))#
cat (paste ("95% coverage: ", mean(cover.95), "\n"))#
# Do it again, this time using t intervals#
n.fake <- 1000#
cover.68 <- rep (NA, n.fake)#
cover.95 <- rep (NA, n.fake)#
t.68 <-  qt (.84, n-2)#
t.95 <-  qt (.975, n-2)#
for (s in 1:n.fake){#
  y <- a + b*x + rnorm (n, 0, sigma)#
  lm.1 <- lm (y ~ x)#
  b.hat <- coef (lm.1)[2]      #
  b.se <- se.coef (lm.1)[2]   #
  cover.68[s] <- abs (b - b.hat) < t.68*b.se  #
  cover.95[s] <- abs (b - b.hat) < t.95*b.se #
}#
cat (paste ("68% coverage: ", mean(cover.68), "\n"))#
cat (paste ("95% coverage: ", mean(cover.95), "\n"))
library ("arm")#
grades <- read.table ("ARM_Data/simulation/gradesW4315.dat", header=TRUE)
setwd("~/Documents/H/gelmanhill")
library ("arm")
grades <- read.table ("ARM_Data/simulation/gradesW4315.dat", header=TRUE)#
midterm <- grades[,"Midterm"]#
final <- grades[,"Final"]
lm.1 <- lm (final ~ midterm)
display (lm.1)
n <- length(final)#
X <- cbind (rep(1,n), midterm)#
predicted <- X %*% coef (lm.1)#
resid <- lm.1$residuals
coef (lm.1)
X
a <- 65 # intercept#
b <- 0.7 # slope of midterm on final#
sigma <- 15 # residual sd#
y.fake <- a + b*midterm + rnorm (n, 0, sigma)
y.fake
lm.fake <- lm (y.fake ~ midterm)
predicted.fake <- X %*% coef (lm.fake)
resid.fake <- y.fake - predicted.fake
resid.fake
y.fake
resid.fake
par (mfrow=c(1,2))#
## Plots figure 8.1#
 # plot on the left#
plot (predicted, resid, xlab="predicted value", ylab="residual",#
  main="Residuals vs. predicted values", pch=20)#
abline (0,0, col="gray", lwd=.5)
library ("arm")#
y <- scan ("ARM_Data/lightspeed/lightspeed.dat", skip=4)
## Model fit #
light <- lm (y ~ 1)#
display (light)#
## Create the replicated data #
n.sims <- 1000#
sim.light <- sim (light, n.sims)#
## Create fake data #
n <- length (y)#
y.rep <- array (NA, c(n.sims, n))#
for (s in 1:n.sims){#
  y.rep[s,] <- rnorm (n, sim.light@coef[s], sim.light@sigma[s])#
}
## Histogram of replicated data (Figure 8.4)#
par (mfrow=c(5,4), mar=c(3,1,2,1))#
for (s in 1:20){#
  hist (y.rep[s,], xlab="", ylab="", cex.main="1", yaxt="n", xlim=range(y))#
}#
## Write a function to make histograms with specified bin widths and ranges#
Hist.preset <- function (a, width, ...){#
  a.hi <- max (a, na.rm=TRUE)#
  a.lo <- min (a, na.rm=TRUE)#
  if (is.null(width)) width <- min (sqrt(a.hi-a.lo), 1e-5)#
  bin.hi <- width*ceiling(a.hi/width)#
  bin.lo <- width*floor(a.lo/width)#
  hist (a, breaks=seq(bin.lo,bin.hi,width), ...)#
}#
## Run the function#
par (mfrow=c(5,4), mar=c(3,1,2,1))#
for (s in 1:20){#
  Hist.preset (y.rep[s,], width=5, xlab="", ylab="", cex.main="1", yaxt="n",#
               xlim=range(y), main=paste("Replication #",s,sep=""))#
}#
## Numerical test#
Test <- function (y){#
  min (y)#
}#
test.rep <- rep (NA, n.sims)#
for (s in 1:n.sims){#
  test.rep[s] <- Test (y.rep[s,])#
}#
# equivalently#
#
test.rep1 <- apply(y.rep, 1, Test)#
## Histogram Figure 8.5#
par (mfrow=c(1,1))#
hist (test.rep, xlim=range (Test(y)*1.2, test.rep*1.2), yaxt="n", ylab="",#
 xlab="", main="Observed T(y) and distribution of T(y.rep)")#
#lines (rep (Test(y), 2), c(0,10*n))#
abline(v = Test(y), col = "blue")
# All data are at http://www.stat.columbia.edu/~gelman/arm/examples/roaches#
library ("R2WinBUGS")
roachdata <- read.csv ("ARM_Data/roaches/roachdata.csv")#
attach.all (roachdata)
glm.1 <- glm (y ~ roach1 + treatment + senior, family=poisson,#
  offset=log(exposure2))#
display (glm.1)
head(roachdata)
library(foreign)#
library(arm)
