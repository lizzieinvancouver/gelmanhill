mydata <- read.csv("fish.species.csv" , header=TRUE)
attach(mydata)
install.packages("swirl")
library("swirl")
swirl()
library(vegan)
install.packages("swirl")
swirl()
library(swirl)
swirl()
?picante
help(picante)
rm(list=ls()) # remove everything currently held in the R memory
graphics.off()
# Install Packages
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
packages <- c("ggplot2", "plyr", "dplyr", "tidyr", "tidytext",
"purrr", "Hmisc", "lme4","rstan","shinystan","picante")
ipak(packages)
?fixef
?ranef
library("xtable", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("tidyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("rstudio", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("markdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("rmarkdown", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("rstan, type="source")
install.packages("rstan, type= "source")
install.packages("rstan", type= "source")
rm(list=ls()) # remove everything currently held in the R memory
graphics.off()
rstan:::rstudio_stanc("Documents/Temporal Ecology/Stanleyi/nesting_ex.stan")
install.LaTeX2RTF(page_with_download_url = "http://sourceforge.net/projects/latex2rtf/", ...)
install.packages("LaTeX2RTF")
library(LaTeX2RTF)
install.LaTeX2RTF
install.LaTeX2RTF()
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
library(foreign)
library(arm)
library(ggplot2)
library(dplyr)
setwd("~/Documents/git/gelmanhill/gelmanhill_stuff/ARM_data/sesame")
sesame <- read.dta("sesame.dta")
for (i in 1:240) {
no.tx<- (sesame$id==i) & (sesame$viewenc==0)
lm.control<- lm(sesame$postlet~sesame$prelet, subset=no.tx)
}
for (i in 1:240) {
no.tx<- (sesame$id==i) & (sesame$viewenc==1)
lm.control<- lm(sesame$postlet~sesame$prelet, subset=no.tx)
}
for (i in 1:240) {
no.tx<- (sesame$id==i) & (sesame$viewenc==1)
lm.control<- glm(sesame$postlet~sesame$prelet, subset=no.tx)
}
for (i in 1:240) {
no.tx<- (sesame$id==i) & (sesame$viewenc==1)
lm.control<- lm(sesame$postlet~sesame$prelet, data=no.tx)
}
control<-sesame %>%
filter(viewenc == 1)
lm.control<- lm(postlet~prelet, data=control)
summary(lm.control)
ggplot(control, postlet~prelet) + xlab("Pre Encouragement") + ylab("Post Encouragement")
ggplot(control, aes(postlet~prelet)) + xlab("Pre Encouragement") + ylab("Post Encouragement")
ggplot(control, aes(prelet,postlet)) + xlab("Pre Encouragement") + ylab("Post Encouragement")
ggplot(control, aes(prelet,postlet)) + xlab("Pre Encouragement") +
ylab("Post Encouragement") + geom_point(aes(col=viewenc)) + geom_smooth(method = "lm")
plot(postlet~prelet, data = control)
no.tx<- (sesame$id==i) & (sesame$viewenc==1)
lm.control<- lm(sesame$postlet~sesame$prelet, data=no.tx)
lm.control<- lm(postlet~prelet, data=no.tx)
lm.control<- lm(sesame$postlet~sesame$prelet, subset = no.tx)
for (i in 1:240) {
no.tx<- (sesame$id==i) & (sesame$viewenc==1)
lm.control<- lm(sesame$postlet~sesame$prelet, subset = no.tx)
}
for (i in 1:sesame$id) {
no.tx<- (sesame$id==i) & (sesame$viewenc==1)
lm.control<- lm(sesame$postlet~sesame$prelet, subset = no.tx)
}
for (i in 1:sesame$id) {
no.tx<- (sesame$id==i) & (sesame$viewenc==1)
lm.notx<- lm(sesame$postlet~sesame$prelet, subset = no.tx)
}
print(lm.notx)
summary(lm.notx)
for (i in 1:sesame$id) {
no.tx<- (sesame$id==i) & (sesame$viewenc==1)
lm.notx<- lm(sesame$postlet~sesame$prelet, data = no.tx)
}
summary(lm.notx)
for (i in unique(sesame$id)) {
no.tx<- (sesame$viewenc==1)
lm.notx<- lm(postnumb~prenumb, subset  = no.tx)
}
for (i in unique(sesame$id)) {
no.tx<- (sesame$viewenc==1)
lm.notx<- lm(sesame$postnumb~sesame$prenumb, subset  = no.tx)
}
summary(lm.notx)
for (i in unique(sesame$id)) {
no.tx<- (sesame$viewenc==1)
lm.notx<- lm(sesame$postnumb~sesame$prenumb, subset  = no.tx)
lm.tx<- lm(sesame$postnumb~sesame$encour + sesame$prenumb + sesame$encour:sesame$prenumb )
}
summary(lm.notx)
summary(lm.tx)
lm.tx.sim<- sim(lm.tx)
for (i in 1:240){
curve(lm.tx.sim$beta[i,2] + lm.tx.sim$beta[i,4]*x, lwd=.5, col="gray", add=TRUE)
}
for (i in 1:240){
curve(lm.tx.sim[i,2] + lm.tx.sim[i,4]*x, lwd=.5, col="gray", add=TRUE)
}
for (i in 1:240){
curve(lm.tx.sim[i] + lm.tx.sim[i]*x, lwd=.5, col="gray", add=TRUE)
}
for (i in 1:240){
curve(lm.tx.sim + lm.tx.sim*x, lwd=.5, col="gray", add=TRUE)
}
ggplotRegression(lm.tx)
ggplot(sesame, aes(encour, postnumb)) +geom_point(aes(col=prenumb)) + stat_smooth(method="lm")
ggplot(sesame, aes(prenumb,postnumb)) +geom_point(aes(col=encour)) + stat_smooth(method="lm")
no.encour<-ggplot(control, aes(prenumb,posnumb)) + geom_point(aes(col=encour)) + stat_smooth(method = "lm")
plot(no.encour)
no.encour<-ggplot(control, aes(prenumb,postnumb)) + geom_point(aes(col=encour)) + stat_smooth(method = "lm")
plot(no.encour)
summary(no.encour)
summary(tx)
tx<-ggplot(sesame, aes(prenumb,postnumb)) +geom_point(aes(col=encour)) + stat_smooth(method="lm")
plot(tx)
summary(tx)
no.encour<-ggplot(control, aes(prenumb,postnumb)) + geom_point(aes(col=encour)) +
stat_smooth(method = "lm") + geom_text(label = lm_eqn(control))
no.encour<-ggplot(control, aes(prenumb,postnumb)) + geom_point(aes(col=encour)) +
stat_smooth_func(geom="text",method="lm",hjust=0,parse=TRUE) +
geom_smooth(method="lm",se=FALSE)
plot(no.encour)
summary(no.encour)
no.encour<-ggplot(control, aes(prenumb,postnumb)) + geom_point(aes(col=encour)) +
stat_smooth(geom="text",method="lm",hjust=0,parse=TRUE) +
geom_smooth(method="lm",se=FALSE)
plot(no.encour)
no.encour<-ggplot(control, aes(prenumb,postnumb)) + geom_point(aes(col=encour)) +
stat_smooth(geom="text",method="lm",hjust=0,parse=TRUE) +
geom_smooth(method="lm",se=FALSE, label=lm.co)
plot(no.encour)
control<-sesame %>%
filter(viewenc == 1)
lm.co<- lm(postlet~prelet, data=control)
no.encour<-ggplot(control, aes(prenumb,postnumb)) + geom_point(aes(col=encour)) +
stat_smooth(geom="text",method="lm",hjust=0,parse=TRUE) +
geom_smooth(method="lm",se=FALSE, label=lm.co)
no.encour<-ggplot(control, aes(prenumb,postnumb)) + geom_point(aes(col=encour)) +
stat_smooth(geom="text",method="lm",hjust=0,parse=TRUE, label = lm.co) +
geom_smooth(method="lm",se=FALSE)
plot(no.encour)
no.encour<-ggplot(control, aes(prenumb,postnumb)) + geom_point(aes(col=encour)) +
stat_smooth(method="lm", label = lm.co)
ggplot(sesame, aes(prenumb,postnumb)) +geom_point() +
stat_smooth(method="lm") + facet_grid(. ~ encour)
rm(list=ls()) # remove everything currently held in the R memory
options(stringsAsFactors=FALSE)
graphics.off()
library(foreign)
library(arm)
library(ggplot2)
library(dplyr)
setwd("~/Documents/git/gelmanhill/gelmanhill_stuff/ARM_data/sesame")
sesame <- read.dta("sesame.dta")
for (i in unique(sesame$id)) {
no.tx<- (sesame$viewenc==1)
lm.notx<- lm(sesame$postnumb~sesame$prenumb, subset  = no.tx)
lm.tx<- lm(sesame$postnumb~sesame$encour + sesame$prenumb + sesame$encour:sesame$prenumb )
}
summary(lm.notx)
summary(lm.tx)
tx<-ggplot(sesame, aes(prenumb,postnumb)) +geom_point(aes(col=encour)) +
stat_smooth(method="lm") + geom_text(label = lm_eqn(sesame))
tx<-ggplot(sesame, aes(prenumb,postnumb)) +geom_point(aes(col=encour)) +
stat_smooth(method="lm")
plot(tx)
control<-sesame %>%
filter(viewenc == 1)
lm.co<- lm(postlet~prelet, data=control)
summary(lm.co)
no.encour<-ggplot(control, aes(prenumb,postnumb)) + geom_point(aes(col=encour)) +
stat_smooth(method="lm", label = lm.co)
no.encour<-ggplot(control, aes(prenumb,postnumb)) + geom_point(aes(col=encour)) +
stat_smooth(method="lm")
plot(no.encour)
ggplot(sesame, aes(prenumb,postnumb)) +geom_point() +
stat_smooth(method="lm") + facet_grid(. ~ encour)
