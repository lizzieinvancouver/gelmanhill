data(newick.eg)#
par(mfrow = c(3,2))#
for(i in 1:6) plot(newick2phylog(newick.eg[[i]], FALSE),#
 clea = 2, clabel.l = 3, cnod = 2.5)#
par(mfrow = c(1,1))
plot(phtre, clabel.nodes=0.5)
plot(phtre, clabel.leaves=0.5)
plot(phtre, clabel.nodes=0.5)
plot.phylog
?plot.phylog
tt <- read.tree("tre.phy")
tt <- read.tree("tre2.phy")
plot(tr)
plot(tt)
str(tt)
?plot.phylo
example(cophyloplot)
plot.phylo
plot(tt)
tt$edge
tt$edge[,2]
reorder(tt)
ttre <- reorder(tt)
ttre$edge
match(tt$edge[,2],xe[,2])
match(tt$edge[,2],ttre[,2])
match(tt$edge[,2],ttre$edge[,2])
i.primeW
tt$edge.label <- i.primeW
plot(tt, cedge = .5)
plot(tt)
tt
str(tt)
plot(tt, show.node.label=T)
X <- c("red", "orange", "yellow", "green", "blue", "purple")#
plot(bird.orders,#
     edge.color = sample(X, length(bird.orders$edge)/2, replace = TRUE),#
     edge.width = sample(1:10, length(bird.orders$edge)/2, replace = TRUE))#
title("Rainbow colouring")#
plot(bird.orders, type = "c", use.edge.length = FALSE,#
     edge.color = sample(X, length(bird.orders$edge)/2, replace = TRUE),#
     edge.width = rep(5, length(bird.orders$edge)/2))#
segments(rep(0, 6), 6.5:1.5, rep(2, 6), 6.5:1.5, lwd = 5, col = X)#
text(rep(2.5, 6), 6.5:1.5, paste(X, "..."), adj = 0)#
title("Character mapping...")#
plot(bird.orders, "u", font = 1, cex = 0.75)#
data(bird.families)#
plot(bird.families, "u", lab4ut = "axial", font = 1, cex = 0.5)#
plot(bird.families, "r", font = 1, cex = 0.5)#
### cladogram with oblique tip labels
cat("(((Strix_aluco:4.2,Asio_otus:4.2):3.1,",#
   "Athene_noctua:7.3):6.3,Tyto_alba:13.5);",#
   file = "ex.tre", sep = "\n")#
tree.owls <- read.tree("ex.tre")#
plot(tree.owls)#
unlink("ex.tre") # delete the file "ex.tre"#
#
### Show the types of trees.#
layout(matrix(1:6, 3, 2))#
plot(tree.owls, main = "With branch lengths")#
plot(tree.owls, type = "c")#
plot(tree.owls, type = "u")#
plot(tree.owls, use.edge.length = FALSE, main = "Without branch lengths")#
plot(tree.owls, type = "c", use.edge.length = FALSE)#
plot(tree.owls, type = "u", use.edge.length = FALSE)#
layout(matrix(1))#
#
data(bird.orders)#
### using random colours and thickness#
plot(bird.orders,#
     edge.color = sample(colors(), length(bird.orders$edge)/2),#
     edge.width = sample(1:10, length(bird.orders$edge)/2, replace = TRUE))#
title("Random colours and branch thickness")#
### rainbow colouring...#
X <- c("red", "orange", "yellow", "green", "blue", "purple")#
plot(bird.orders,#
     edge.color = sample(X, length(bird.orders$edge)/2, replace = TRUE),#
     edge.width = sample(1:10, length(bird.orders$edge)/2, replace = TRUE))#
title("Rainbow colouring")#
plot(bird.orders, type = "c", use.edge.length = FALSE,#
     edge.color = sample(X, length(bird.orders$edge)/2, replace = TRUE),#
     edge.width = rep(5, length(bird.orders$edge)/2))#
segments(rep(0, 6), 6.5:1.5, rep(2, 6), 6.5:1.5, lwd = 5, col = X)
text(rep(2.5, 6), 6.5:1.5, paste(X, "..."), adj = 0)#
title("Character mapping...")#
plot(bird.orders, "u", font = 1, cex = 0.75)#
data(bird.families)#
plot(bird.families, "u", lab4ut = "axial", font = 1, cex = 0.5)#
plot(bird.families, "r", font = 1, cex = 0.5)
example(plot.phylo)
phylogram.plot
tt$edge
Ntip
Ntip <- length(tt$tip.label)
Ntip
length(tt$node.label)
str(tt$node.label)
str(tt)
Nnode <- tt$Nnode
Nnode
edge = tt$edge
xx <- .nodeDepth(Ntip, Nnode, z$edge, Nedge, #
                  node.depth) - 1
ans <- .C(node_height_clado, as.integer(Ntip), as.integer(Nnode), #
                as.integer(z$edge[, 1]), as.integer(z$edge[, #
                  2]), as.integer(Nedge), double(Ntip + Nnode), #
                as.double(yy))
z <- reorder(x, order = "postorder")
Ntip <- length(x$tip.label)#
Nnode <- x$Nnode#
edge = x$edge
Ntip <- length(x$tip.label)
x = tt
Ntip <- length(x$tip.label)
Nnode <- x$Nnode
edge = x$edge
horizontal = TRUE#
edge.color = "black"#
edge.width = 1#
edge.lty = 1
z <- reorder(x, order = "postorder")
ans <- .C(node_height_clado, as.integer(Ntip), as.integer(Nnode), #
                as.integer(z$edge[, 1]), as.integer(z$edge[, #
                  2]), as.integer(Nedge), double(Ntip + Nnode), #
                as.double(yy))#
            xx <- ans[[6]] - 1#
            yy <- ans[[7]]
node_height_clado
Ntip
Nnode
z$edge[, 1]
z$edge[, #
                  2
plot.phylo
any(tabulate(x$edge[, 1]) == 1)
.nodeHeight <- function(Ntip, Nnode, edge, Nedge, yy) .C(node_height, #
        as.integer(Ntip), as.integer(Nnode), as.integer(edge[, #
            1]), as.integer(edge[, 2]), as.integer(Nedge), as.double(yy))[[6]]#
    .nodeDepth <- function(Ntip, Nnode, edge, Nedge, node.depth) .C(node_depth, #
        as.integer(Ntip), as.integer(Nnode), as.integer(edge[, #
            1]), as.integer(edge[, 2]), as.integer(Nedge), double(Ntip + #
            Nnode), as.integer(node.depth))[[6]]#
    .nodeDepthEdgelength <- function(Ntip, Nnode, edge, Nedge, #
        edge.length) .C(node_depth_edgelength, as.integer(Ntip), #
        as.integer(Nnode), as.integer(edge[, 1]), as.integer(edge[, #
            2]), as.integer(Nedge), as.double(edge.length), double(Ntip + #
            Nnode))[[7]]
Nedge <- dim(x$edge)[1]
Nnode <- x$Nnode
if (any(x$edge < 1) || any(x$edge > Ntip + Nnode)) #
        stop("tree badly conformed; cannot plot. Check the edge matrix.")
ROOT <- Ntip + 1
ROOT
x$edge.length
xe <- x$edge
phyOrder <- attr(x, "order")
phyOrder
is.null(phyOrder)
phyOrder
is.null(phyOrder) || phyOrder != "cladewise"
yy <- numeric(Ntip + Nnode)
yy
Ntip
Nnode
TIPS <- x$edge[x$edge[, 2] <= Ntip, 2]
TIPS
yy[TIPS] <- 1:Ntip
yy
z <- reorder(x, order = "postorder")
is.null(node.pos)
node.pos <- if (type == "cladogram" && !use.edge.length) #
                2
node.pos
node.pos <- 1
yy <- .nodeHeight(Ntip, Nnode, z$edge, Nedge, yy)
yy
xx <- .nodeDepth(Ntip, Nnode, z$edge, Nedge, #
                  node.depth) - 1
xx <- .nodeDepthEdgelength(Ntip, Nnode, z$edge, Nedge, #
                z$edge.length)
xx
x = tt#
#
Ntip <- length(x$tip.label)#
Nnode <- x$Nnode#
edge = x$edge#
#xx#
#yy#
horizontal = "rightwards"#
edge.color = "black"#
edge.width = 1#
edge.lty = 1#
    .nodeHeight <- function(Ntip, Nnode, edge, Nedge, yy) .C(node_height, #
        as.integer(Ntip), as.integer(Nnode), as.integer(edge[, #
            1]), as.integer(edge[, 2]), as.integer(Nedge), as.double(yy))[[6]]#
    .nodeDepth <- function(Ntip, Nnode, edge, Nedge, node.depth) .C(node_depth, #
        as.integer(Ntip), as.integer(Nnode), as.integer(edge[, #
            1]), as.integer(edge[, 2]), as.integer(Nedge), double(Ntip + #
            Nnode), as.integer(node.depth))[[6]]#
    .nodeDepthEdgelength <- function(Ntip, Nnode, edge, Nedge, #
        edge.length) .C(node_depth_edgelength, as.integer(Ntip), #
        as.integer(Nnode), as.integer(edge[, 1]), as.integer(edge[, #
            2]), as.integer(Nedge), as.double(edge.length), double(Ntip + #
            Nnode))[[7]]#
    Nedge <- dim(x$edge)[1]#
    ROOT <- Ntip + 1#
    xe <- x$edge#
        yy <- numeric(Ntip + Nnode)#
        TIPS <- x$edge[x$edge[, 2] <= Ntip, 2]#
        yy[TIPS] <- 1:Ntip#
#
    z <- reorder(x, order = "postorder")#
    yy <- .nodeHeight(Ntip, Nnode, z$edge, Nedge, yy)#
	xx <- .nodeDepthEdgelength(Ntip, Nnode, z$edge, Nedge, #
                z$edge.length)
nodes <- (Ntip + 1):(Ntip + Nnode)
nodes
horizontal
!horizontal
x0v <- xx[nodes]
y0v <- y1v <- numeric(Nnode)
NodeInEdge1 <- vector("list", Nnode)
e1 <- edge[, 1]
for (i in seq_along(e1)) {#
        j <- e1[i] - Ntip#
        NodeInEdge1[[j]] <- c(NodeInEdge1[[j]], i)#
    }
for (i in 1:Nnode) {#
        j <- NodeInEdge1[[i]]#
        tmp <- range(yy[edge[j, 2]])#
        y0v[i] <- tmp[1]#
        y1v[i] <- tmp[2]#
    }#
    x0h <- xx[edge[, 1]]#
    x1h <- xx[edge[, 2]]#
    y0h <- yy[edge[, 2]]#
    nc <- length(edge.color)#
    nw <- length(edge.width)#
    nl <- length(edge.lty)#
    if (nc + nw + nl == 3) {#
        color.v <- edge.color#
        width.v <- edge.width#
        lty.v <- edge.lty#
    }
nc + nw + nl == 3
segments(x0h, y0h, x1h, y0h, col = edge.color, lwd = edge.width, #
            lty = edge.lty)#
        segments(x0v, y0v, x0v, y1v, col = color.v, lwd = width.v, #
            lty = lty.v)
nodes <- (Ntip + 1):(Ntip + Nnode)#
    x0v <- xx[nodes]#
    y0v <- y1v <- numeric(Nnode)#
    NodeInEdge1 <- vector("list", Nnode)#
    e1 <- edge[, 1]#
    for (i in seq_along(e1)) {#
        j <- e1[i] - Ntip#
        NodeInEdge1[[j]] <- c(NodeInEdge1[[j]], i)#
    }#
    for (i in 1:Nnode) {#
        j <- NodeInEdge1[[i]]#
        tmp <- range(yy[edge[j, 2]])#
        y0v[i] <- tmp[1]#
        y1v[i] <- tmp[2]#
    }#
    x0h <- xx[edge[, 1]]#
    x1h <- xx[edge[, 2]]#
    y0h <- yy[edge[, 2]]#
    nc <- length(edge.color)#
    nw <- length(edge.width)#
    nl <- length(edge.lty)#
    if (nc + nw + nl == 3) {#
        color.v <- edge.color#
        width.v <- edge.width#
        lty.v <- edge.lty#
    }
nc + nw + nl == 3
segments(x0h, y0h, x1h, y0h, col = edge.color, lwd = edge.width, #
            lty = edge.lty)#
        segments(x0v, y0v, x0v, y1v, col = color.v, lwd = width.v, #
            lty = lty.v)
plot.default(0, type = "n", xlim = x.lim, ylim = y.lim, xlab = "", #
        ylab = "", axes = FALSE, asp = asp, ...)
plot.default(0, type = "n", xlim = x.lim, ylim = y.lim, xlab = "", #
        ylab = "", axes = FALSE, asp = NA)
plot.default(0, type = "n", #xlim = x.lim, ylim = y.lim, #
xlab = "", #
        ylab = "", axes = FALSE, asp = NA)
segments(x0h, y0h, x1h, y0h, col = edge.color, lwd = edge.width, #
            lty = edge.lty)#
        segments(x0v, y0v, x0v, y1v, col = color.v, lwd = width.v, #
            lty = lty.v)
x0h
y0h
locator()
x1h
max(x1h
)
min(x0h)
plot.default(0, type = "n", xlim = c(0,1), ylim = c(0,10), #
xlab = "", #
        ylab = "", axes = FALSE, asp = NA)
segments(x0h, y0h, x1h, y0h, col = edge.color, lwd = edge.width, #
            lty = edge.lty)#
        segments(x0v, y0v, x0v, y1v, col = color.v, lwd = width.v, #
            lty = lty.v)
plot.default(0, type = "n", xlim = c(0,1), ylim = c(0,8), #
xlab = "", #
        ylab = "", axes = FALSE, asp = NA)
segments(x0h, y0h, x1h, y0h, col = edge.color, lwd = edge.width, #
            lty = edge.lty)#
        segments(x0v, y0v, x0v, y1v, col = color.v, lwd = width.v, #
            lty = lty.v)
plot.default(0, type = "n", xlim = c(0,0.5), ylim = c(0,8), #
xlab = "", #
        ylab = "", axes = FALSE, asp = NA)
segments(x0h, y0h, x1h, y0h, col = edge.color, lwd = edge.width, #
            lty = edge.lty)#
        segments(x0v, y0v, x0v, y1v, col = color.v, lwd = width.v, #
            lty = lty.v)
x0v
y0h
?segments
length(x0v)
length(y0v)
length(y1v)
length(x1v)
length(x1h)
x1h
locator()
y1v
y0v
x0v
x-h
x0h
mean(x0h, x1h)
x1h
rbind(x0h, x1h)
apply(rbind(x0h, x1h), 1, mean)
apply(rbind(x0h, x1h), 2, mean)
xwrite <- apply(rbind(x0h, x1h), 2, mean)
i.primeW
text(x = xwrite, y = y0v, i.primeW)
y1v
text(x = xwrite, y = c(y0v, y1v), i.primeW)
plot.default(0, type = "n", xlim = c(0,0.5), ylim = c(0,8), #
xlab = "", #
        ylab = "", axes = FALSE, asp = NA)
segments(x0h, y0h, x1h, y0h, col = edge.color, lwd = edge.width, #
            lty = edge.lty)#
        segments(x0v, y0v, x0v, y1v, col = color.v, lwd = width.v, #
            lty = lty.v)
text(x = xwrite, y = c(y0v, y1v), i.primeW)
A
AFd
AFw
plot(tree)
AFw/rowsum(AFw)
AFw/rowSums(AFw)
xtree
x0h
y0h
x1h
y0h
segments(x0h, y0h, x1h, y0h, col = edge.color, lwd = edge.width, #
            lty = edge.lty)#
        segments(x0v, y0v, x0v, y1v, col = color.v, lwd = width.v, #
            lty = lty.v)
plot.default(0, type = "n", xlim = c(0,0.5), ylim = c(0,8), #
xlab = "", #
        ylab = "", axes = FALSE, asp = NA)#
#
  segments(x0h, y0h, x1h, y0h, col = edge.color, lwd = edge.width, #
            lty = edge.lty)#
  segments(x0v, y0v, x0v, y1v, col = color.v, lwd = width.v, #
            lty = lty.v)
plot.default(0, type = "n", xlim = c(0,0.5), ylim = c(0,8), #
xlab = "", #
        ylab = "", axes = FALSE, asp = NA)#
#
  segments(x0h, y0h, x1h, y0h, col = edge.color, lwd = edge.width, #
            lty = edge.lty)
segments(x0v, y0v, x0v, y1v, col = color.v, lwd = width.v, #
            lty = lty.v)
plot.default(0, type = "n", xlim = c(0,0.5), ylim = c(0,8), #
xlab = "", #
        ylab = "", axes = FALSE, asp = NA)
segments(x0h, y0h, x1h, y0h, col = edge.color, lwd = edge.width, #
            lty = edge.lty)
xwrite <- apply(rbind(x0h, x1h), 2, mean)
xwrite <- apply(rbind(x0h, x1h), 2, mean)#
text(x = xwrite, y = c(y0h), i.primeW)
text(x = xwrite, y = c(y0h)+0.1, i.primeW)
plot.default(0, type = "n", xlim = c(0,0.5), ylim = c(0,8), #
xlab = "", #
        ylab = "", axes = FALSE, asp = NA)#
#
  segments(x0h, y0h, x1h, y0h, col = edge.color, lwd = edge.width, #
            lty = edge.lty)#
#
xwrite <- apply(rbind(x0h, x1h), 2, mean)#
text(x = xwrite, y = c(y0h)+0.1, i.primeW)    #
#
  segments(x0v, y0v, x0v, y1v, col = color.v, lwd = width.v, #
            lty = lty.v)
x$edge
text(x = xwrite, y = c(y0h)+0.1, i.primeW[x$edge[,2]])
plot.default(0, type = "n", xlim = c(0,0.5), ylim = c(0,8), #
xlab = "", #
        ylab = "", axes = FALSE, asp = NA)#
#
  segments(x0h, y0h, x1h, y0h, col = edge.color, lwd = edge.width, #
            lty = edge.lty)#
#
xwrite <- apply(rbind(x0h, x1h), 2, mean)#
text(x = xwrite, y = c(y0h)+0.1, i.primeW[x$edge[,2]])    #
#
segments(x0v, y0v, x0v, y1v, col = color.v, lwd = width.v, #
            lty = lty.v)
1.25/2
i.primeW
A
xtree$h1
xtree
xtree$H1
tree$edge
tt$edge
tt$edge[,2]
reorder(tt$edge[,2])
order(tt$edge[,2])
text(x = xwrite, y = c(y0h)+0.1, i.primeW[order(x$edge[,2]]))
plot.default(0, type = "n", xlim = c(0,0.5), ylim = c(0,8), #
xlab = "", #
        ylab = "", axes = FALSE, asp = NA)#
#
  segments(x0h, y0h, x1h, y0h, col = edge.color, lwd = edge.width, #
            lty = edge.lty)#
#
xwrite <- apply(rbind(x0h, x1h), 2, mean)#
text(x = xwrite, y = c(y0h)+0.1, i.primeW[order(x$edge[,2])])
segments(x0v, y0v, x0v, y1v, col = color.v, lwd = width.v, #
            lty = lty.v)
AFw[1,]
A
A[1,]
plot(tree)
sum(A[1,])
1/8
sum(AF2)
sum(AFw[1,])
i.primeW
xtree
Xtree
h=tree
h
H1 <- matrix(0, length(h$order), 2 * length(h$order) - 2)
H1
l <- vector("numeric", 2 * length(h$order) - 2)
l
length(h$order)
h$order
h$merge
i=1
h$merge[i, 1]
l[2 * i - 1] <- h$height[order(h$height)[i]]
2 * i
h$height
[order(h$height)[i]
order(h$height)[i]
order(h$height)
i
order(h$height)[i]
h$height[order(h$height)[i]]
H1[ - h$merge[i, 1], 2 * i - 1] <- 1
library(rstan)
library(rstan)
getwd()
# setwd("~/Dropbox/Work/Harvard/Wolkovich Lab/gelmanhill/R/Stan")
schools_dat <- list(J = 8, #
                    y = c(28,  8, -3,  7, -1,  1, 18, 12),#
                    sigma = c(15, 10, 16, 11,  9, 11, 10, 18))
fit <- stan(file = '8schools.stan', data = schools_dat, #
            iter = 1000, chains = 4)
fit2 <- stan(fit = fit1, data = schools_dat, iter = 10000, chains = 4)
schools_code <- paste(readLines('8schools.stan'), collapse = '\n')
schools_code
fit1 <- stan(model_code = schools_code, data = schools_dat, #
             iter = 1000, chains = 4)
# Updating model#
fit2 <- stan(fit = fit1, data = schools_dat, iter = 10000, chains = 4)
print(fit2)
plot(fit2)
la <- extract(fit2, permuted = TRUE) # return a list of arrays #
mu <- la$mu
a <- extract(fit2, permuted = FALSE)
a
a2 <- as.array(fit2)#
m <- as.matrix(fit2)
print(fit, digits = 1)
J
J <- 8#
y <- c(28,  8, -3,  7, -1,  1, 18, 12)#
sigma_y <- c(15, 10, 16, 11,  9, 11, 10, 18)
y <- read.table('rats.txt', header = TRUE)#
x <- c(8, 15, 22, 29, 36)#
rats_dat <- list(N = nrow(y), T = ncol(y), #
                 x = x, y = y, xbar = mean(x))#
rats_fit <- stan(file = 'rats.stan', data = rats_dat, verbose = FALSE)
dir()
rats_dat <- list(N = nrow(y), T = ncol(y), #
                 x = x, y = y, xbar = mean(x))
rats_fit <- stan(file = 'rats.stan', data = rats_dat, verbose = FALSE)
